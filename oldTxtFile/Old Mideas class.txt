boolean closeRequested = false;
		while(!(closeRequested = Display.isCloseRequested()) && !c) {
			fpsUpdate();
			GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
			GL11.glLoadIdentity();
			context2D();
			while(Mouse.next()) {
				if(Mouse.getEventButtonState()) { 
					joueur1 = setClasse(1);
					System.out.println("gg");
				}
			}
			Hud.render();  
			x = Mouse.getX();
			y = Window.getHeight()-Mouse.getY();
			Draw.drawQuad(Sprites.bg, Display.getWidth()/2-Sprites.bg.getImageWidth()/2, Display.getHeight()/2-Sprites.bg.getImageHeight()/2);
			Draw.drawQuad(Sprites.class_choose, Window.getWidth()/2-162, Window.getHeight()/2-119);
			Draw.drawQuad(Sprites.warrior_create_classe, Window.getWidth()/2-140, Window.getHeight()/2-80);
			Draw.drawQuad(Sprites.paladin_create_classe,Window.getWidth()/2-78, Window.getHeight()/2-80);
			Draw.drawQuad(Sprites.hunter_create_classe,Window.getWidth()/2-16, Window.getHeight()/2-80);
			Draw.drawQuad(Sprites.rogue_create_classe,Window.getWidth()/2+46, Window.getHeight()/2-80);
			Draw.drawQuad(Sprites.priest_create_classe, Window.getWidth()/2+108, Window.getHeight()/2-80);
			Draw.drawQuad(Sprites.deathknight_create_classe,Window.getWidth()/2-140, Window.getHeight()/2-13);
			Draw.drawQuad(Sprites.shaman_create_classe,Window.getWidth()/2-78, Window.getHeight()/2-13);
			Draw.drawQuad(Sprites.mage_create_classe,Window.getWidth()/2-16, Window.getHeight()/2-13);
			Draw.drawQuad(Sprites.warlock_create_classe,Window.getWidth()/2+46, Window.getHeight()/2-13);
			Draw.drawQuad(Sprites.monk_create_classe,Window.getWidth()/2+108, Window.getHeight()/2-13);
			
			Draw.drawQuad(Sprites.border, Window.getWidth()/2-146, Window.getHeight()/2-85);
			Draw.drawQuad(Sprites.border2, Window.getWidth()/2-84, Window.getHeight()/2-85);
			Draw.drawQuad(Sprites.border3, Window.getWidth()/2-22, Window.getHeight()/2-85);
			Draw.drawQuad(Sprites.border4, Window.getWidth()/2+40, Window.getHeight()/2-85);
			Draw.drawQuad(Sprites.border5, Window.getWidth()/2+102, Window.getHeight()/2-85);
			Draw.drawQuad(Sprites.border6, Window.getWidth()/2-146, Window.getHeight()/2-18);
			Draw.drawQuad(Sprites.border7, Window.getWidth()/2-84, Window.getHeight()/2-18);
			Draw.drawQuad(Sprites.border8, Window.getWidth()/2-22, Window.getHeight()/2-18);
			Draw.drawQuad(Sprites.border9, Window.getWidth()/2+40, Window.getHeight()/2-18);
			Draw.drawQuad(Sprites.border10, Window.getWidth()/2+102, Window.getHeight()/2-18);
			
			TTF.playerName.drawString(Window.getWidth()/2-26, Window.getHeight()/2-108, "Class select", Color.yellow);
			
			if(x >= Window.getWidth()/2-140 && x <= Window.getWidth()/2-84 && y >= Window.getHeight()/2-80 && y <= Window.getHeight()/2-24) {
				Draw.drawQuad(Sprites.hover, Window.getWidth()/2-144, Window.getHeight()/2-82);
			}
			else if(x >= Window.getWidth()/2-78 && x <= Window.getWidth()/2-22 && y >= Window.getHeight()/2-80 && y <= Window.getHeight()/2-24) {
				Draw.drawQuad(Sprites.hover, Window.getWidth()/2-82, Window.getHeight()/2-82);
			}
			else if(x >= Window.getWidth()/2-16 && x <= Window.getWidth()/2+40 && y >= Window.getHeight()/2-80 && y <= Window.getHeight()/2-24) {
				Draw.drawQuad(Sprites.hover, Window.getWidth()/2-20, Window.getHeight()/2-82);
			}
			else if(x >= Window.getWidth()/2+46 && x <= Window.getWidth()/2+102 && y >= Window.getHeight()/2-80 && y <= Window.getHeight()/2-24) {
				Draw.drawQuad(Sprites.hover, Window.getWidth()/2+40, Window.getHeight()/2-82);
			}
			else if(x >= Window.getWidth()/2+108 && x <= Window.getWidth()/2+164 && y >= Window.getHeight()/2-80 && y <= Window.getHeight()/2-24) {
				Draw.drawQuad(Sprites.hover, Window.getWidth()/2+104, Window.getHeight()/2-82);
			}
			else if(x >= Window.getWidth()/2-140 && x <= Window.getWidth()/2-84 && y >= Window.getHeight()/2-13 && y <= Window.getHeight()/2+43) {
				Draw.drawQuad(Sprites.hover, Window.getWidth()/2-144, Window.getHeight()/2-15);
			}
			else if(x >= Window.getWidth()/2-78 && x <= Window.getWidth()/2-22 && y >= Window.getHeight()/2-13 && y <= Window.getHeight()/2+43) {
				Draw.drawQuad(Sprites.hover, Window.getWidth()/2-82, Window.getHeight()/2-15);
			}
			else if(x >= Window.getWidth()/2-16 && x <= Window.getWidth()/2+40 && y >= Window.getHeight()/2-13 && y <= Window.getHeight()/2+43) {
				Draw.drawQuad(Sprites.hover, Window.getWidth()/2-20, Window.getHeight()/2-15);
			}
			else if(x >= Window.getWidth()/2+46 && x <= Window.getWidth()/2+102 && y >= Window.getHeight()/2-13 && y <= Window.getHeight()/2+43) {
				Draw.drawQuad(Sprites.hover, Window.getWidth()/2+40, Window.getHeight()/2-15);
			}
			else if(x >= Window.getWidth()/2+108 && x <= Window.getWidth()/2+164 && y >= Window.getHeight()/2-13 && y <= Window.getHeight()/2+43) {
				Draw.drawQuad(Sprites.hover, Window.getWidth()/2+104, Window.getHeight()/2-15);
			}
			Display.update();
			Display.sync(60);
		}*/
		/*while(!(closeRequested = Display.isCloseRequested()) && joueur1.getStamina() > 0 && joueur2.getStamina() > 0) {
			boolean hasNext = Keyboard.next();
			if(hasNext) {
				do {
					if(Keyboard.getEventKeyState()) {
						if(Keyboard.getEventKey() == Keyboard.KEY_RETURN) {
							if(currentPlayer) {
        						joueur1.tick();
        					}
        					else {
        						joueur2.attackUI(Spell.getRandomSpell());
        					}
    						Hud.lifeBars();
    						Hud.manaBars();
    						Hud.redBars();
    						if(Hud.redBars()) {
    							break;
    						}
							currentPlayer = !currentPlayer;
						}
						if(Keyboard.getEventKey() == Keyboard.KEY_1) {
							if(currentPlayer) {
								joueur1.tick();
								Hud.lifeBars();
								Hud.manaBars();
        						Hud.redBars();
        						if(Hud.redBars()) {
        							break;
        						}
							}
        					else {
        						joueur2.attackUI(Spell.getRandomSpell());
        						Hud.lifeBars();
        						Hud.manaBars();
        						Hud.redBars();
        						if(Hud.redBars()) {
        							break;
        						}
        					}
							currentPlayer = !currentPlayer;
						}
						else if(Keyboard.getEventKey() == Keyboard.KEY_2) {
							if(currentPlayer) {
								joueur1.cast(Mideas.joueur1().getSpells()[2], joueur2);
								Hud.lifeBars();
								Hud.manaBars();
        						Hud.redBars();
        						if(Hud.redBars()) {
        							break;
        						}
							}
        					else {
        						joueur2.attackUI(Spell.getRandomSpell());
        						Hud.lifeBars();
        						Hud.manaBars();
        						Hud.redBars();
        						if(Hud.redBars()) {
        							break;
        						}
        					}
							currentPlayer = !currentPlayer;
						}
						else if(Keyboard.getEventKey() == Keyboard.KEY_3) {
							if(currentPlayer) {
								joueur1.cast(Mideas.joueur1().getSpells()[1], joueur2);
								Hud.lifeBars();
								Hud.manaBars();
        						Hud.redBars();
        						if(Hud.redBars()) {
        							break;
        						}
							}
        					else {
        						joueur2.attackUI(Spell.getRandomSpell());
        						Hud.lifeBars();
        						Hud.manaBars();
        						Hud.redBars();
        						if(Hud.redBars()) {
        							break;
        						}
        					}
							currentPlayer = !currentPlayer;
						}
						else if(Keyboard.getEventKey() == Keyboard.KEY_4) {
							if(currentPlayer) {
								joueur1.cast(Mideas.joueur1().getSpells()[0], joueur2);
								Hud.lifeBars();
								Hud.manaBars();
        						Hud.redBars();
        						if(Hud.redBars()) {
        							break;
        						}
							}
        					else {
        						joueur2.attackUI(Spell.getRandomSpell());
        						Hud.lifeBars();
        						Hud.manaBars();
        						Hud.redBars();
        						if(Hud.redBars()) {
        							break;
        						}
        					}
							currentPlayer = !currentPlayer;
						}
						else if(Keyboard.getEventKey() == Keyboard.KEY_C) {
							if(currentPlayer) {
								while(!key) {
									while(Keyboard.next()) {						
									}
									fpsUpdate();
									GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
									GL11.glLoadIdentity();
									context2D();
									Hud.render();
									Draw.drawQuad(Sprites.cursor, -100, -100);
									InventoryFrame.frame();
									Display.update();
									Display.sync(60);
									if(Keyboard.getEventKey() == Keyboard.KEY_ESCAPE) {
										key = true;
									}
								}
							}
							key = false;
						}
						else if(Keyboard.getEventKey() == Keyboard.KEY_B) {
							if(currentPlayer) {
								while(!key) {
									while(Keyboard.next()) {						
									}
									fpsUpdate();
									GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
									GL11.glLoadIdentity();
									context2D();
									Hud.render();
									Draw.drawQuad(Sprites.cursor, -100, -100);
									InventoryFrame.bags();
									Display.update();
									Display.sync(60);
									if(Keyboard.getEventKey() == Keyboard.KEY_ESCAPE) {
										key = true;
									}
								}
							}
						}
						key = false;
					}				
				} while(Keyboard.next());
			}
			while(Mouse.next()) {
				x = Mouse.getX();
				y = Display.getHeight()-Mouse.getY();
				if(Mouse.getEventButtonState()) {
					if(Hud.hoveredSpell != null) {
						if(currentPlayer) {
							joueur1.cast(Hud.hoveredSpell, joueur2);
							System.out.println(Hud.hoveredSpell);
    						Hud.redBars();
    						if(Hud.redBars()) {
    							break;
    						}
						}
						else {
							joueur2.cast(Spell.getRandomSpell(), joueur1);
							System.out.println(Hud.hoveredSpell);
    						Hud.redBars();
    						if(Hud.redBars()) {
    							break;
    						}
						}
						currentPlayer = !currentPlayer;
					}			
					else {
						x = Mouse.getX();
						y = Display.getHeight()-Mouse.getY();
						if(Mideas.x >= Window.getWidth()-739 && Mideas.y >= Window.getHeight()-61 && Mideas.x <= Window.getWidth()-683 && Mideas.y <= Window.getHeight()-5) {
							if(currentPlayer) {
								joueur1.tick();
			        			Hud.lifeBars();
        						Hud.manaBars();
        						Hud.redBars();
        						if(Hud.redBars()) {
        							break;
        						}
			        		}
			        		else {
			        			joueur2.attackUI(Spell.getRandomSpell());
			        			Hud.lifeBars();
        						Hud.manaBars();
        						Hud.redBars();
        						if(Hud.redBars()) {
        							break;
        						}
			        		}
			        		currentPlayer = !currentPlayer;
						}
					}
				}
			}
			if(!currentPlayer) {
				joueur2.attackUI(Spell.getRandomSpell());
				currentPlayer = !currentPlayer;
			}
			fpsUpdate();
			GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
			GL11.glLoadIdentity();
			context2D();
			Hud.render();
			Display.update();
			Display.sync(60);
		}
		if(!closeRequested) {
			while(!Display.isCloseRequested()) {
				fpsUpdate();
				GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
				GL11.glLoadIdentity();
				context2D();
				Display.sync(60);
				Hud.setStatusText("");
				Hud.setStatusText2("");
				Hud.redBars();
				Hud.render();
				x = Mouse.getX();
				y = Display.getHeight()-Mouse.getY();
				while(Keyboard.next()) {
					
				}
				Draw.drawQuad(Sprites.alert, Window.getWidth()/2-Sprites.button_hover.getImageWidth()/2-105, Window.getHeight()/2-80);
				if(x >= Window.getWidth()/2-130 && x <= Window.getWidth()/2-3 && y <= Window.getHeight()/2-18 && y >= Window.getHeight()/2-37) {
					Draw.drawQuad(Sprites.button_hover, Window.getWidth()/2-Sprites.button_hover.getImageWidth()/2-70, Window.getHeight()/2-43);
				}
				else {
					Draw.drawQuad(Sprites.button, Window.getWidth()/2-Sprites.button_hover.getImageWidth()/2-70, Window.getHeight()/2-43);
				}
				TTF.buttonFont.drawString(Window.getWidth()/2-TTF.buttonFont.getWidth("Retry")/2-70, Window.getHeight()/2-40, "Retry", Color.black);
				TTF.buttonFont.drawString(Window.getWidth()/2-TTF.buttonFont.getWidth("Retry")/2-69, Window.getHeight()/2-41, "Retry", Color.white);
				if(x >= Window.getWidth()/2+7 && x <= Window.getWidth()/2+134 && y <= Window.getHeight()/2-15 && y >= Window.getHeight()/2-38) {
					Draw.drawQuad(Sprites.button_hover2, Window.getWidth()/2-Sprites.button_hover.getImageWidth()/2+70, Window.getHeight()/2-43);
					if(Mouse.getEventButtonState()) {
						System.exit(1);
					}
				}
				else {
					Draw.drawQuad(Sprites.button2, Window.getWidth()/2-Sprites.button_hover.getImageWidth()/2+70, Window.getHeight()/2-43);
				}
				TTF.buttonFont.drawString(Window.getWidth()/2-TTF.buttonFont.getWidth("Quit")/2+70, Window.getHeight()/2-40, "Quit", Color.black);
				TTF.buttonFont.drawString(Window.getWidth()/2-TTF.buttonFont.getWidth("Quit")/2+69, Window.getHeight()/2-41, "Quit", Color.white);
				if(Mideas.joueur1.getStamina() <= 0) {
					TTF.font4.drawString(Window.getWidth()/2-49, Window.getHeight()/2-65, "Player 2 WON", Color.black);
					TTF.font4.drawString(Window.getWidth()/2-50, Window.getHeight()/2-66, "Player 2 WON", Color.white);
					//TTF.font2.drawString(250-104-TTF.font.getWidth("Dead")/2, 56, "Dead", Color.black); 
				}
				else if(Mideas.joueur2.getStamina() <= 0) {
					TTF.font4.drawString(Window.getWidth()/2-49, Window.getHeight()/2-65, "Player 1 WON", Color.black);
					TTF.font4.drawString(Window.getWidth()/2-50, Window.getHeight()/2-66, "Player 1 WON", Color.white);
					//TTF.font2.drawString(Window.getWidth()-104-TTF.font.getWidth("Dead")/2, 56, "Dead", Color.black);
					if(isExp == 0) {
						setExp();
						getLevel();
						isExp++;
					}
				}
				//Display.update();
				while(Mouse.next()) {
					if(Mouse.getEventButtonState()) {
						if(x >= Window.getWidth()/2-130 && x <= Window.getWidth()/2-3 && y <= Window.getHeight()/2-18 && y >= Window.getHeight()/2-37) {
							joueur2 = getRandomClass(2);
							joueur1.setStamina(joueur1.getMaxStamina());
							joueur1.setMana(joueur1.getMaxMana());
							/*joueur1.setLeggings((Leggings)stuffManager.getStuff(1));
							joueur1.setChest((Chest)stuffManager.getStuff(3));
							joueur1.setHead((Head)stuffManager.getStuff(5));
							joueur1.setBoots((Boots)stuffManager.getStuff(7));
							joueur1.setWrists((Wrists)stuffManager.getStuff(9));
							joueur2.setLeggings((Leggings)stuffManager.getStuff(2));
							joueur2.setChest((Chest)stuffManager.getStuff(4));
							joueur2.setHead((Head)stuffManager.getStuff(6));
							joueur2.setBoots((Boots)stuffManager.getStuff(8));
							joueur2.setWrists((Wrists)stuffManager.getStuff(10));
							System.out.println("Joueur 1 hp : "+Mideas.joueur1.getStamina());
							System.out.println("Joueur 2 hp : "+Mideas.joueur2.getStamina());
							Hud.lifeBars();
							Hud.manaBars();
							closeRequested = false;
							while(!(closeRequested = Display.isCloseRequested()) && joueur1.getStamina() > 0 && joueur2.getStamina() > 0) {
								boolean hasNext = Keyboard.next();
								isExp = 0;
								if(hasNext) {
									do {
										if(Keyboard.getEventKeyState()) {
											if(Keyboard.getEventKey() == Keyboard.KEY_RETURN) {
												if(currentPlayer) {
					        						joueur1.tick();
					        						Hud.lifeBars();
					        						Hud.manaBars();
					        						Hud.redBars();
					        						if(Hud.redBars()) {
					        							break;
					        						}
					        					}
					        					else {
					        						joueur2.attackUI(Spell.getRandomSpell());
					        						Hud.lifeBars();
					        						Hud.manaBars();
					        						Hud.redBars();
					        						if(Hud.redBars()) {
					        							break;
					        						}
					        					}
												currentPlayer = !currentPlayer;
											}
											if(Keyboard.getEventKey() == Keyboard.KEY_1) {
												if(currentPlayer) {
													joueur1.tick();
													Hud.lifeBars();
													Hud.manaBars();
					        						Hud.redBars();
					        						if(Hud.redBars()) {
					        							break;
					        						}
												}
					        					else {
					        						joueur2.attackUI(Spell.getRandomSpell());
					        						Hud.lifeBars();
					        						Hud.manaBars();
					        						Hud.redBars();
					        						if(Hud.redBars()) {
					        							break;
					        						}
					        					}
												currentPlayer = !currentPlayer;
											}
											else if(Keyboard.getEventKey() == Keyboard.KEY_2) {
												if(currentPlayer) {
													joueur1.cast(Mideas.joueur1().getSpells()[2], joueur2);
													Hud.lifeBars();
													Hud.manaBars();
					        						Hud.redBars();
					        						if(Hud.redBars()) {
					        							break;
					        						}
												}
					        					else {
					        						joueur2.attackUI(Spell.getRandomSpell());
					        						Hud.lifeBars();
					        						Hud.manaBars();
					        						Hud.redBars();
					        						if(Hud.redBars()) {
					        							break;
					        						}
					        					}
												currentPlayer = !currentPlayer;
											}
											else if(Keyboard.getEventKey() == Keyboard.KEY_3) {
												if(currentPlayer) {
													joueur1.cast(Mideas.joueur1().getSpells()[1], joueur2);
													Hud.lifeBars();
													Hud.manaBars();
					        						Hud.redBars();
					        						if(Hud.redBars()) {
					        							break;
					        						}
												}
					        					else {
					        						joueur2.attackUI(Spell.getRandomSpell());
					        						Hud.lifeBars();
					        						Hud.manaBars();
					        						Hud.redBars();
					        						if(Hud.redBars()) {
					        							break;
					        						}
					        					}
												currentPlayer = !currentPlayer;
											}
											else if(Keyboard.getEventKey() == Keyboard.KEY_4) {
												if(currentPlayer) {
													joueur1.cast(Mideas.joueur1().getSpells()[0], joueur2);
													Hud.lifeBars();
													Hud.manaBars();
					        						Hud.redBars();
					        						if(Hud.redBars()) {
					        							break;
					        						}
												}
					        					else {
					        						joueur2.attackUI(Spell.getRandomSpell());
					        						Hud.lifeBars();
					        						Hud.manaBars();
					        					}
												currentPlayer = !currentPlayer;
											}
											else if(Keyboard.getEventKey() == Keyboard.KEY_C) {
												if(currentPlayer) {
													while(!key) {
														while(Keyboard.next()) {			
														}
														fpsUpdate();
														Draw.drawQuad(Sprites.character_frame2, Window.getWidth()/2-300, Window.getHeight()/2-380);
														InventoryFrame.frame();
														Display.update();
														Display.sync(60);
														if(Keyboard.getEventKey() == Keyboard.KEY_ESCAPE) {
															key = true;
														}
													}
												}
											}
											key = false;
										}
									} while(Keyboard.next());
								}
								while(Mouse.next()) {
									x = Mouse.getX();
									y = Display.getHeight()-Mouse.getY();
									if(Mouse.getEventButtonState()) {
										if(Hud.hoveredSpell != null) {
											if(currentPlayer) {
												joueur1.cast(Hud.hoveredSpell, joueur2);
												System.out.println(Hud.hoveredSpell);
				        						Hud.redBars();
				        						if(Hud.redBars()) {
				        							break;
				        						}
											}
											currentPlayer = !currentPlayer;
										}			
										else {
											x = Mouse.getX();
											y = Display.getHeight()-Mouse.getY();
											if(Mideas.x >= Window.getWidth()-739 && Mideas.y >= Window.getHeight()-61 && Mideas.x <= Window.getWidth()-683 && Mideas.y <= Window.getHeight()-5) {
												if(currentPlayer) {
													joueur1.tick();
								        			Hud.lifeBars();
					        						Hud.manaBars();
					        						Hud.redBars();
					        						if(Hud.redBars()) {
					        							break;
					        						}
								        		}
								        		currentPlayer = !currentPlayer;
											}
										}
									}
								}
								if(!currentPlayer) {
									joueur2.attackUI(Spell.getRandomSpell());
									currentPlayer = !currentPlayer;
								}
								fpsUpdate();
								GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
								GL11.glLoadIdentity();
								context2D();
								Hud.render();
								Display.update();
								Display.sync(60);
							}
						}
					}
				}
				Display.update();
			}
		}*/